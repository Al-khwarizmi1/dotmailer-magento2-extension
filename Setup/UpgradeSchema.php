<?php

namespace Dotdigitalgroup\Email\Setup;

use Magento\Framework\DB\DataConverter\SerializedToJson;
use Magento\Framework\DB\FieldDataConverterFactory;
use Magento\Framework\DB\Select\QueryModifierFactory;
use Magento\Framework\Setup\UpgradeSchemaInterface;
use Magento\Framework\Setup\ModuleContextInterface;
use Magento\Framework\Setup\SchemaSetupInterface;
use Magento\Framework\DB\Query\Generator;

/**
 * @codeCoverageIgnore
 */
class UpgradeSchema implements UpgradeSchemaInterface
{

    public $fieldDataConverterFactory;
    public $queryModifierFactory;
    public $queryGenerator;

    public function __construct(
        FieldDataConverterFactory $fieldDataConverterFactory,
        QueryModifierFactory $queryModifierFactory,
        Generator $queryGenerator
    ) {
        $this->fieldDataConverterFactory = $fieldDataConverterFactory;
        $this->queryModifierFactory = $queryModifierFactory;
        $this->queryGenerator = $queryGenerator;
    }
    /**
     * {@inheritdoc}
     */
    public function upgrade(SchemaSetupInterface $setup, ModuleContextInterface $context)
    {
        $setup->startSetup();
        $connection = $setup->getConnection();
        if (version_compare($context->getVersion(), '1.1.0', '<')) {
            //remove quote table
            $connection->dropTable($setup->getTable('email_quote'));
        }
        if (version_compare($context->getVersion(), '2.0.6', '<')) {
            //modify email_campaign table
            $campaignTable = $setup->getTable('email_campaign');

            //add columns
            $connection->addColumn(
                $campaignTable,
                'send_id',
                [
                    'type' => \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,
                    'nullable' => false,
                    'default' => '',
                    'comment' => 'Campaign Send Id'
                ]
            );
            $connection->addColumn(
                $campaignTable,
                'send_status',
                [
                    'type' => \Magento\Framework\DB\Ddl\Table::TYPE_SMALLINT,
                    'nullable' => false,
                    'default' => 0,
                    'comment' => 'Send Status'
                ]
            );

            if ($connection->tableColumnExists($campaignTable, 'is_sent')) {
                //update table with historical send values
                $select = $connection->select();

                //join
                $select->joinLeft(
                    ['oc' => $campaignTable],
                    "oc.id = nc.id",
                    [
                        'send_status' => new \Zend_Db_Expr(\Dotdigitalgroup\Email\Model\Campaign::SENT)
                    ]
                )->where('oc.is_sent =?', 1);

                //update query from select
                $updateSql = $select->crossUpdateFromSelect(['nc' => $campaignTable]);

                //run query
                $connection->query($updateSql);

                //remove column
                $connection->dropColumn($campaignTable, 'is_sent');
            }

            //add index
            $connection->addIndex(
                $campaignTable,
                $setup->getIdxName($campaignTable, ['send_status']),
                ['send_status']
            );
        }
        if (version_compare($context->getVersion(), '2.1.0', '<')) {
            $couponTable = $setup->getTable('salesrule_coupon');
            $connection->addColumn(
                $couponTable,
                'generated_by_dotmailer',
                [
                    'type' => \Magento\Framework\DB\Ddl\Table::TYPE_SMALLINT,
                    'nullable' => true,
                    'default' => null,
                    'comment' => '1 = Generated by dotmailer'
                ]
            );
        }

        if (version_compare($context->getVersion(), '2.2.1', '<')) {
            //modify the condition column name for the email_rules table - reserved name for mysql
            $rulesTable = $setup->getTable('email_rules');

            if ($connection->tableColumnExists($rulesTable, 'condition')) {
                $connection->changeColumn(
                    $rulesTable,
                    'condition',
                    'conditions',
                    [
                        'type' => \Magento\Framework\DB\Ddl\Table::TYPE_BLOB,
                        'nullable' => false,
                        'comment' => 'Rule Conditions'
                    ]
                );
            }
            $this->convertDataForConfig($setup);
            $this->convertDataForImporter($setup);
            $this->convertDataForRules($setup);
        }

        $setup->endSetup();
    }

    /**
     * @param $setup
     */
    private function convertDataForConfig($setup)
    {
        //use Magento\Framework\DB\DataConverter\SerializedToJson;
        $fieldDataConverter = $this->fieldDataConverterFactory->create(SerializedToJson::class);
        //select the config options to convert json
        $queryModifier = $this->queryModifierFactory->create(
            'in',
            [
                'values' => [
                    'path' => [
                        'connector_automation/order_status_automation/program',
                        'connector_data_mapping/customer_data/custom_attributes',
                    ]
                ]
            ]
        );
        //destination for the value
        $fieldDataConverter->convert(
            $setup->getConnection(),
            $setup->getTable('core_config_data'),
            'config_id',
            'value',
            $queryModifier
        );
    }

    /**
     * @param $setup
     */
    private function convertDataForRules($setup)
    {
        //use Magento\Framework\DB\DataConverter\SerializedToJson;
        $fieldDataConverter = $this->fieldDataConverterFactory->create(SerializedToJson::class);
        //destination for the value
        $fieldDataConverter->convert(
            $setup->getConnection(),
            $setup->getTable('email_rules'),
            'id',
            'conditions'
        );
    }

    /**
     * @param $setup
     */
    private function convertDataForImporter($setup)
    {
        //use Magento\Framework\DB\DataConverter\SerializedToJson;
        $fieldDataConverter = $this->fieldDataConverterFactory->create(SerializedToJson::class);
        //select the config options to convert json
        $queryModifier = $this->queryModifierFactory->create(
            'in',
            [
                'values' => [
                    'import_type' => [
                        'Catalog_Default',
                        'Orders',
                    ]
                ]
            ]
        );
        //destination for the value
        $fieldDataConverter->convert(
            $setup->getConnection(),
            $setup->getTable('email_importer'),
            'id',
            'import_data',
            $queryModifier
        );
    }
}
